from robustsecretsharing.schemes import pairing
import pytest


def run_pair_unpair(tup):
    z = pairing.elegant_pair(tup[0], tup[1])
    result = pairing.elegant_unpair(z)
    return tup == result


def test_small():
    tup = (5, 10)
    assert run_pair_unpair(tup) is True


def test_medium():
    tup = (300, 240)
    assert run_pair_unpair(tup) is True


def test_large_ish():
    x = long('123456789012345678901234567890123456789012345678901234567890'
             '123456789012345678901234567890123456789012345678901234567890')
    y = long('987654321098765432109876543210987654321098765432109876543210'
             '987654321098765432109876543210987654321098765432109876543210')

    assert run_pair_unpair((x, y)) is True


def test_large():
    x = long('123456789012345678901234567890123456789012345678901234567890'
             '123456789012345678901234567890123456789012345678901234567890'
             '123456789012345678901234567890123456789012345678901234567890'
             '123456789012345678901234567890123456789012345678901234567890'
             '123456789012345678901234567890123456789012345678901234567890'
             '123456789012345678901234567890123456789012345678901234567890'
             '123456789012345678901234567890123456789012345678901234567890')
    y = long('987654321098765432109876543210987654321098765432109876543210'
             '987654321098765432109876543210987654321098765432109876543210'
             '987654321098765432109876543210987654321098765432109876543210'
             '987654321098765432109876543210987654321098765432109876543210'
             '987654321098765432109876543210987654321098765432109876543210'
             '987654321098765432109876543210987654321098765432109876543210'
             '987654321098765432109876543210987654321098765432109876543210')

    assert run_pair_unpair((x, y)) is True


def test_very_large():
    x = long('123456789012345678901234567890123456789012345678901234567890'
             '123456789012345678901234567890123456789012345678901234567890'
             '123456789012345678901234567890123456789012345678901234567890'
             '123456789012345678901234567890123456789012345678901234567890'
             '123456789012345678901234567890123456789012345678901234567890'
             '123456789012345678901234567890123456789012345678901234567890'
             '123456789012345678901234567890123456789012345678901234567890'
             '123456789012345678901234567890123456789012345678901234567890'
             '123456789012345678901234567890123456789012345678901234567890'
             '123456789012345678901234567890123456789012345678901234567890'
             '123456789012345678901234567890123456789012345678901234567890')
    y = long('987654321098765432109876543210987654321098765432109876543210'
             '987654321098765432109876543210987654321098765432109876543210'
             '987654321098765432109876543210987654321098765432109876543210'
             '987654321098765432109876543210987654321098765432109876543210'
             '987654321098765432109876543210987654321098765432109876543210'
             '987654321098765432109876543210987654321098765432109876543210'
             '987654321098765432109876543210987654321098765432109876543210'
             '987654321098765432109876543210987654321098765432109876543210'
             '987654321098765432109876543210987654321098765432109876543210'
             '987654321098765432109876543210987654321098765432109876543210'
             '987654321098765432109876543210987654321098765432109876543210')

    assert run_pair_unpair((x, y)) is True


def test_size_mix():
    x = 4444
    y = long('987654321098765432109876543210987654321098765432109876543210'
             '987654321098765432109876543210987654321098765432109876543210'
             '987654321098765432109876543210987654321098765432109876543210'
             '987654321098765432109876543210987654321098765432109876543210'
             '987654321098765432109876543210987654321098765432109876543210'
             '987654321098765432109876543210987654321098765432109876543210'
             '987654321098765432109876543210987654321098765432109876543210')

    assert run_pair_unpair((x, y)) is True


def test_same_values():
    x = 975318642
    y = x
    assert run_pair_unpair((x, y)) is True


def test_first_greater():
    x = 99999
    y = 11111
    assert run_pair_unpair((x, y)) is True


def test_second_greater():
    x = 44444444
    y = 88888888
    assert run_pair_unpair((x, y)) is True


def test_one_zero():
    x = 0
    y = 1324346
    assert run_pair_unpair((x, y)) is True


def test_both_zero():
    x = 0
    y = 0
    assert run_pair_unpair((x, y)) is True


def test_sign_mix():
    x = -936
    y = 603
    with pytest.raises(ValueError):
        run_pair_unpair((x, y)) is True


def test_negative():
    x = -123456789
    y = -987654321
    with pytest.raises(ValueError):
        run_pair_unpair((x, y)) is True
